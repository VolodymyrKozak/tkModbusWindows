/*
 * a3_TK112TxRx.h
 *
 *  Created on: 31 груд. 2019 р.
 *      Author: KozakVF
 */

#ifndef SRC_MB_WINDOWS_TK2_A3_TK2TXRX_H_
#define SRC_MB_WINDOWS_TK2_A3_TK2TXRX_H_
#include "../mb_funcs/tw_mb.h"
#include "../wConfig.h"
#include "../mb_funcs/vk_wqueue.h"
#define VK_UPDATE_WINDOW 0xC002

typedef struct{
		HWND hwnd;
		int in_case;
		modbus_master_tx_msg_t mb_tx_msg;
		int timeout;
}tk_session_data_t;



/* Це функція - обробник черги яка:
 * забирає дані з голови черги в тимчасові змінні
 * стирає голову черги
 * надсилає повідомлення з параметрами, заданими в тілі вузла черги  */
void f_desktop_tk_session (

		queue_t *htkQ            /* показчик на структуру - дескриптор черги*/
	);


void f_Stop_tk2_session (void);

/* Ця функція додає нове повідомлення в чергу
 * повертає довжину черги */
int f_set_tkqueue(
		queue_t *htkQ,           /* показчик на структуру - дескриптор черги*/
		FunctionalState lifo, /* ENABLE  - додати в голову черги
		                       * DISABLE - додати у хвіст черги */
		HWND hwnd,            /* вікно, з якого надійшло повідомлення в чергу */
		int in_case,          /* ідентифікатор у вікні, за яким буде визначатися обробка відповіді */
		modbus_master_tx_msg_t *pmb_tx_msg,
							  /* повідомлення Модбас*/
		int timeout           /* таймаут для модбас-повідомлення */
		);

/* Глобальна змінна -  підсумковий процент зайнятості каналу
* за весь час дистанційного управління  */
extern procentf_t gTxRxBusyAveDegreef          ;
/* Глобальна змінна - поточний процент зайнятості каналу
* зглажений з постійною часу - п'ять останніх сеансів */
extern procentf_t gTxRxBusyDegreef             ;
/* Поточний лічильник сесій*/
extern ULONGLONG  gTxRxSessionStartCntr        ;
/* Поточний лічильний сесій, що завершилися без помилок */
extern ULONGLONG  gTxRxSessionOkCntr           ;
/* Поточний процент сесій, що завершилися без помилок   */
extern procentf_t gTxRxSessionSuccessDegreef   ;
/* Середній за весь час дистанційного управління сесій, що завершилися без помилок */
extern procentf_t gTxRxSessionAVESuccessDegreef;

/* Тривилість часу Iddle and Busy
 * 1) починаємо рахувати після натискання кнопки
 *    старту дистанційного управління, коли починається періодичне опитування регістра
 * 2) перериваємо після входу в вікно налаштуваня користувача,
 * 3) відразу ж відновлюємо у прив'язцs до початку періодичного питування
 * 	  стану доступу
 * 	  Це опитування не припиняється при вході користувача в режим налаштувань виробника
 * 4) перериваємо при виході з вікна налаштувань користувача
 * 5) відновлюємо при виході з налаштувань користувача у прив'язці до
 *    відновлення опитування стану тк2
 * 6) Остаточно припиняємо при виході з програми..
 * */
void f_TxRxBusyDegreeCalcStart(void);
/* Тривилість часу Iddle and Busy
 * 1) починаємо рахувати після натискання кнопки
 *    старту дистанційного управління, коли починається періодичне опитування регістра
 * 2) перериваємо після входу в вікно налаштуваня користувача,
 * 3) відразу ж відновлюємо у прив'язцs до початку періодичного питування
 * 	  стану доступу
 * 	  Це опитування не припиняється при вході користувача в режим налаштувань виробника
 * 4) перериваємо при виході з вікна налаштувань користувача
 * 5) відновлюємо при виході з налаштувань користувача у прив'язці до
 *    відновлення опитування стану тк2
 * 6) Остаточно припиняємо при виході з програми..
 * */
void f_TxRxBusyDegreeCalcStop(char *log, size_t log_size);

//HWND f_SetTxRxHWND(HWND hwnd);
/* Отримання довжини черги. Повідомлення яке обробляється
 * в черзі вже не стоїть..
 * При відсутності черги, тобто повідомлення прийшло й тут же передано в
 * в процес сесії Модбас складно зафіксувати наявність черги,
 * тому більш доцільно використовувати функцію f_get_tk2rs232_length() */
int f_get_tkqueue_length(queue_t *htkQ);


/* Отримання довжини черги з урахуванням повідомлення,яке знаходиться у стані обробки*/
int f_get_tkrs232_length(queue_t *htkQ);

/* Вилучення голови. При цьому визначається наступна голова. */
/* Видалення голови в циклі допоки голів не залишится        */
int f_clear_tkqueue(queue_t *htkQ);
#endif /* SRC_MB_WINDOWS_TK2_A3_TK2TXRX_H_ */
